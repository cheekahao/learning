(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{376:function(v,e,_){"use strict";_.r(e);var t=_(42),r=Object(t.a)({},(function(){var v=this,e=v.$createElement,_=v._self._c||e;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("h1",{attrs:{id:"typescript"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#typescript"}},[v._v("#")]),v._v(" TypeScript")]),v._v(" "),_("h2",{attrs:{id:"typescript的设计目标"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#typescript的设计目标"}},[v._v("#")]),v._v(" TypeScript的设计目标")]),v._v(" "),_("ul",[_("li",[_("code",[v._v("TypeScript")]),v._v("是一种在编译期进行静态类型分析的强类型语言。拥有一个语言服务层为开发者提供更好的工具。")]),v._v(" "),_("li",[v._v("与"),_("code",[v._v("JavaScript")]),v._v("兼容。"),_("code",[v._v("TypeScript")]),v._v("是"),_("code",[v._v("JavaScript")]),v._v("的超集，任何合法的"),_("code",[v._v("JavaScript")]),v._v("程序都是合法的"),_("code",[v._v("TypeScript")]),v._v("程序。")]),v._v(" "),_("li",[v._v("给大型项目提供一个构建机制，加入了基于类"),_("code",[v._v("Class")]),v._v("的对象、接口和模块。")]),v._v(" "),_("li",[v._v("对于发行版本代码，没有运行时开销。"),_("code",[v._v("TypeScript")]),v._v("程序通常将"),_("strong",[v._v("设计阶段")]),v._v("和"),_("strong",[v._v("运行阶段")]),v._v("分开。"),_("code",[v._v("TypeScript")]),v._v("的新特性仅对"),_("strong",[v._v("设计时代码")]),_("code",[v._v("design time code")]),v._v("有效，而对于"),_("strong",[v._v("执行时代码")]),_("code",[v._v("excution time code")]),v._v("则通过"),_("strong",[v._v("代码转换")]),v._v("（转换为"),_("code",[v._v("JavaScript")]),v._v("代码）和"),_("strong",[v._v("类型擦除")]),v._v("将之转换为纯净的"),_("code",[v._v("JavaScript")]),v._v("代码。")]),v._v(" "),_("li",[v._v("遵循当前以及未来的"),_("code",[v._v("ECMAScript")]),v._v("规范。")]),v._v(" "),_("li",[v._v("开源。")])]),v._v(" "),_("h2",{attrs:{id:"类型"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#类型"}},[v._v("#")]),v._v(" 类型")]),v._v(" "),_("p",[_("code",[v._v("TypeScript")]),v._v("为"),_("code",[v._v("JavaScript")]),v._v("增加了可选的静态类型说明，用以约束函数、变量、属性等程序实体。以便编译器和相应的开发工具可以在开发过程中提供更好的正确性校验和帮助提示。")]),v._v(" "),_("p",[_("strong",[v._v("可选的静态类型声明")]),_("code",[v._v("optional static type notation")]),v._v("在变量的后面并且以冒号分隔：")]),v._v(" "),_("div",{staticClass:"language-ts extra-class"},[_("pre",{pre:!0,attrs:{class:"language-ts"}},[_("code",[_("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("var")]),v._v(" counter                 "),_("span",{pre:!0,attrs:{class:"token comment"}},[v._v("// 未知(any)类型")]),v._v("\n"),_("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("var")]),v._v(" counter "),_("span",{pre:!0,attrs:{class:"token operator"}},[v._v("=")]),v._v(" "),_("span",{pre:!0,attrs:{class:"token number"}},[v._v("0")]),v._v("             "),_("span",{pre:!0,attrs:{class:"token comment"}},[v._v("// number类型，类型推导type inference")]),v._v("\n"),_("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("var")]),v._v(" counter "),_("span",{pre:!0,attrs:{class:"token operator"}},[v._v(":")]),v._v(" "),_("span",{pre:!0,attrs:{class:"token builtin"}},[v._v("number")]),v._v("        "),_("span",{pre:!0,attrs:{class:"token comment"}},[v._v("// number类型")]),v._v("\n"),_("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("var")]),v._v(" counter "),_("span",{pre:!0,attrs:{class:"token operator"}},[v._v(":")]),v._v(" "),_("span",{pre:!0,attrs:{class:"token builtin"}},[v._v("number")]),v._v(" "),_("span",{pre:!0,attrs:{class:"token operator"}},[v._v("=")]),v._v(" "),_("span",{pre:!0,attrs:{class:"token number"}},[v._v("0")]),v._v("    "),_("span",{pre:!0,attrs:{class:"token comment"}},[v._v("// number类型")]),v._v("\n")])])]),_("h3",{attrs:{id:"原始数据类型"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#原始数据类型"}},[v._v("#")]),v._v(" 原始数据类型")]),v._v(" "),_("ul",[_("li",[_("code",[v._v("number")])]),v._v(" "),_("li",[_("code",[v._v("string")])]),v._v(" "),_("li",[_("code",[v._v("boolean")])]),v._v(" "),_("li",[_("code",[v._v("symbol")]),v._v("，是"),_("code",[v._v("ES6")]),v._v("新增的数据类型，在编译目标是"),_("code",[v._v("ES5")]),v._v("及以下时会报错。由于只能通过"),_("code",[v._v("Symbol")]),v._v("函数生成，可以通过类型推断确定类型，无需特别声明变量为"),_("code",[v._v("symbol")]),v._v("类型。")]),v._v(" "),_("li",[_("code",[v._v("undefined")]),v._v("和"),_("code",[v._v("null")]),v._v("，是所有其他类型的子类型，可以赋值给任何其他类型的变量。在"),_("code",[v._v("tsconfig")]),v._v("中开启了"),_("code",[v._v("strictNullChecks")]),v._v("，那么"),_("code",[v._v("undefined")]),v._v("和"),_("code",[v._v("null")]),v._v("就只能赋值给"),_("code",[v._v("void")]),v._v("或"),_("code",[v._v("any")]),v._v("类型变量以及它们自身类型的变量。")])]),v._v(" "),_("h3",{attrs:{id:"高级类型"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#高级类型"}},[v._v("#")]),v._v(" 高级类型")]),v._v(" "),_("ul",[_("li",[_("code",[v._v("void")]),v._v("，表明函数没有返回值")]),v._v(" "),_("li",[_("code",[v._v("any")]),v._v("，任何"),_("code",[v._v("JavaScript")]),v._v("值，即是类型系统的顶级类型（全局超级类型），又是"),_("code",[v._v("bottom type")]),v._v("（任何类型的"),_("code",[v._v("subtype")]),v._v("），是类型系统的一个逃逸舱")]),v._v(" "),_("li",[_("code",[v._v("unknown")]),v._v("，"),_("code",[v._v("TypeScript")]),v._v("3.0引入。类型系统的另一种顶级类型。"),_("code",[v._v("unknown")]),v._v("可以赋值为任意类型，但是只能被赋值给"),_("code",[v._v("any")]),v._v("类型和"),_("code",[v._v("unknown")]),v._v("类型本身。")]),v._v(" "),_("li",[_("code",[v._v("never")]),v._v("，永远不会存在的值的类型。"),_("code",[v._v("never")]),v._v("是任何类型的子类型，但没有类型是"),_("code",[v._v("never")]),v._v("的子类型。")])]),v._v(" "),_("p",[_("code",[v._v("never")]),v._v("类型常用于两种情况：")]),v._v(" "),_("ol",[_("li",[v._v("用于描述从不会有返回值的函数")]),v._v(" "),_("li",[v._v("用于描述总是抛出错误的函数")])])])}),[],!1,null,null,null);e.default=r.exports}}]);