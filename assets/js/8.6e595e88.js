(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{355:function(v,_,t){"use strict";t.r(_);var a=t(42),s=Object(a.a)({},(function(){var v=this,_=v.$createElement,t=v._self._c||_;return t("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[t("h2",{attrs:{id:"架构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#架构"}},[v._v("#")]),v._v(" 架构")]),v._v(" "),t("blockquote",[t("p",[v._v("《架构整洁之道》读书笔记")])]),v._v(" "),t("h2",{attrs:{id:"编程范式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#编程范式"}},[v._v("#")]),v._v(" 编程范式")]),v._v(" "),t("ul",[t("li",[v._v("结构化编程，结构化编程对程序控制权的直接转移进行了限制和规范。限制goto语句")]),v._v(" "),t("li",[v._v("面向对象编程，面向对象编程对程序控制权的间接转移进行了限制和规范。限制函数指针")]),v._v(" "),t("li",[v._v("函数式编程，函数式编程对程序中的赋值进行了限制和规范。限制赋值语句的使用")])]),v._v(" "),t("h2",{attrs:{id:"软件架构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#软件架构"}},[v._v("#")]),v._v(" 软件架构")]),v._v(" "),t("ul",[t("li",[t("p",[v._v("功能性")])]),v._v(" "),t("li",[t("p",[v._v("组件独立性")])]),v._v(" "),t("li",[t("p",[v._v("数据管理")])]),v._v(" "),t("li",[t("p",[v._v("顺序结构")])]),v._v(" "),t("li",[t("p",[v._v("分支结构")])]),v._v(" "),t("li",[t("p",[v._v("循环结构")])])]),v._v(" "),t("h3",{attrs:{id:"面向对象"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#面向对象"}},[v._v("#")]),v._v(" 面向对象")]),v._v(" "),t("ul",[t("li",[v._v("封装")]),v._v(" "),t("li",[v._v("继承")]),v._v(" "),t("li",[v._v("多态")])]),v._v(" "),t("h2",{attrs:{id:"设计原则"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#设计原则"}},[v._v("#")]),v._v(" 设计原则")]),v._v(" "),t("p",[t("code",[v._v("SOLID")]),v._v("原则")]),v._v(" "),t("ul",[t("li",[v._v("SRP: 单一职责原则。每个软件模块有且只有一个需要被改变的理由")]),v._v(" "),t("li",[v._v("OCP: 开闭原则。如果软件系统想要更容易被改变，其设计必须允许新增代码来修改系统行为，而非只能靠修改原来的代码。")]),v._v(" "),t("li",[v._v("LSP: 里氏替换原则。软件系统的组件要遵守同一个约定，以便让这些组件可以相互替换")]),v._v(" "),t("li",[v._v("ISP: 接口隔离原则。在设计中避免不必要的依赖")]),v._v(" "),t("li",[v._v("DIP: 依赖反转原则。高层策略性代码不应该依赖实现底层细节的代码，实现底层细节的代码应该依赖高层策略性代码")])]),v._v(" "),t("h2",{attrs:{id:"架构关注点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#架构关注点"}},[v._v("#")]),v._v(" 架构关注点")]),v._v(" "),t("p",[v._v("架构是系统设计的一部分，它突出了某些细节，并通过抽象省略掉另一些细节。")]),v._v(" "),t("p",[v._v("架构关注的是组件之间的关系和系统组件外部可见的属性，设计还要关注这些组件的内部结构。")]),v._v(" "),t("h3",{attrs:{id:"架构关注点-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#架构关注点-2"}},[v._v("#")]),v._v(" 架构关注点")]),v._v(" "),t("ul",[t("li",[v._v("品质关注点，例如稳定性，技术栈等")])]),v._v(" "),t("h2",{attrs:{id:"组件构建基本原则"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#组件构建基本原则"}},[v._v("#")]),v._v(" 组件构建基本原则")]),v._v(" "),t("ul",[t("li",[v._v("REP：复用/发布等同原则。软件复用的最小粒度应等同于其发布的最小粒度")]),v._v(" "),t("li",[v._v("CCP：共同闭包原则。将会同时修改，且为了相同目的而修改的代码放到同一个组件中。反之亦然。")]),v._v(" "),t("li",[v._v("CRP：共同复用原则。不应强迫一个组件的用户依赖他们不需要的东西。")])])])}),[],!1,null,null,null);_.default=s.exports}}]);